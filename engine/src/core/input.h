#pragma once

enum keycode {
	// Alphabet keys
	KEYCODE_A,
	KEYCODE_B,
	KEYCODE_C,
	KEYCODE_D,
	KEYCODE_E,
	KEYCODE_F,
	KEYCODE_G,
	KEYCODE_H,
	KEYCODE_I,
	KEYCODE_J,
	KEYCODE_K,
	KEYCODE_L,
	KEYCODE_M,
	KEYCODE_N,
	KEYCODE_O,
	KEYCODE_P,
	KEYCODE_Q,
	KEYCODE_R,
	KEYCODE_S,
	KEYCODE_T,
	KEYCODE_U,
	KEYCODE_V,
	KEYCODE_W,
	KEYCODE_X,
	KEYCODE_Y,
	KEYCODE_Z,

	// Number keys
	KEYCODE_0,
	KEYCODE_1,
	KEYCODE_2,
	KEYCODE_3,
	KEYCODE_4,
	KEYCODE_5,
	KEYCODE_6,
	KEYCODE_7,
	KEYCODE_8,
	KEYCODE_9,

	// Function keys
	KEYCODE_F1,
	KEYCODE_F2,
	KEYCODE_F3,
	KEYCODE_F4,
	KEYCODE_F5,
	KEYCODE_F6,
	KEYCODE_F7,
	KEYCODE_F8,
	KEYCODE_F9,
	KEYCODE_F10,
	KEYCODE_F11,
	KEYCODE_F12,

	// Modifier keys
	KEYCODE_SHIFT,
	KEYCODE_CTRL,
	KEYCODE_ALT,
	KEYCODE_CAPSLOCK,
	KEYCODE_TAB,
	KEYCODE_ENTER,
	KEYCODE_SPACE,
	KEYCODE_BACKSPACE,
	KEYCODE_ESC,

	// Arrow keys
	KEYCODE_LEFT,
	KEYCODE_RIGHT,
	KEYCODE_UP,
	KEYCODE_DOWN,

	// Special keys
	KEYCODE_INSERT,
	KEYCODE_DELETE,
	KEYCODE_HOME,
	KEYCODE_END,
	KEYCODE_PAGEUP,
	KEYCODE_PAGEDOWN,

	// Numpad keys
	KEYCODE_NUMPAD_0,
	KEYCODE_NUMPAD_1,
	KEYCODE_NUMPAD_2,
	KEYCODE_NUMPAD_3,
	KEYCODE_NUMPAD_4,
	KEYCODE_NUMPAD_5,
	KEYCODE_NUMPAD_6,
	KEYCODE_NUMPAD_7,
	KEYCODE_NUMPAD_8,
	KEYCODE_NUMPAD_9,
	KEYCODE_NUMPAD_DIVIDE,
	KEYCODE_NUMPAD_MULTIPLY,
	KEYCODE_NUMPAD_SUBTRACT,
	KEYCODE_NUMPAD_ADD,
	KEYCODE_NUMPAD_ENTER,
	KEYCODE_NUMPAD_DECIMAL,

	// Symbols and punctuation
	KEYCODE_COMMA,
	KEYCODE_PERIOD,
	KEYCODE_SLASH,
	KEYCODE_BACKSLASH,
	KEYCODE_SEMICOLON,
	KEYCODE_APOSTROPHE,
	KEYCODE_LEFT_BRACKET,
	KEYCODE_RIGHT_BRACKET,
	KEYCODE_MINUS,
	KEYCODE_EQUAL,

	KEYCODE_MAX_KEYS,
};

struct input_state {
	enum keycode keyboard[KEYCODE_MAX_KEYS];
};

void input_state_create(struct input_state *input_state);
